{"posts":[{"title":"关于LGBT，我很厌恶","text":"为什么要谈LGBT？因为就是想谈了，契机呢还是最近哈利波特游戏与JK罗琳与LGBT团体。 就像荣格学派认为人类的心理疾病是个普遍现象，每个人或多或少都有心理疾病或者说心理疾病的定义并没有那么严格，LGBT也属于心理疾病，如果要LGBT认为不是心理疾病的话，那么其论点论据放在忧郁症上是不是也能得出一个忧郁症不是心理疾病的结论呢？心理疾病和生理疾病的患者都需要关怀，这没错，就像我们不能因为他是盲人而欺负他一样，这是人性的要求，你在他身边喊他瞎子他可能也打你一棍子，那么LGBT有什么不同呢？ 关键在于网络传播媒介的发展，大家都在网络上发言，每个人都能看到数以千万计的资讯，当中必然有“瞎子”这两个字，可能他在说他游戏里的队友操作太菜，但是说者，不，是写者无意听者有心，有些人自然而然的就认为这是对盲人群体的侮辱，“你们叫我们瞎子？这是赤裸裸的侮辱”。 盲人开始在群体游说，发帖表达不满，最终要求所有互联网用户以后不要用“瞎子”这个词，要统一换成“眼睛看不到东西的人”。回到刚才那句话，心理疾病和生理疾病的患者都需要关怀，但是这个关怀都是在一定限度之内的，一个人遇见盲人可能会避免谈及一些眼睛上的问题，但是不能让一个人在生活中一点也不能谈及眼睛上的问题，所有企图让别人一生不谈及眼睛的人都侵犯了别人的自由，这时候请LGBT群体别再拿个人自由当LGBT的挡箭牌来封住谩骂的嘴。 星星的战火一旦点燃，就变成熊熊大火，这种情况完完全全是不可控的。我很赞成JK罗琳发的推的内容，我们都不能用woman来称呼女性了？任何的主义一旦极端了都是有害的，极端动保、极端环保、极端女权，但是需要注意语言陷阱，当谈到极端了，一定是有害的，这是句正确的废话，因为任何事情都可以发生的极端之下，这个极端是什么？不是一百，也不是一个亿而是正无穷。正无穷在现实生活中存在么？我们要在现实生活中为这些极端做个标注，超过了这个点，就有可能是极端，那么这些极端的水位预警点是什么？侵害他的人正当权利。当然，这也太过笼统，比如在施工场上拉横幅阻止施工和动手拆施工设施，这两个都是极端的么？农民反抗剥削的起义是极端，但是是必须的么？这时候我们只能祭出一个最终的大杀器，名字叫大多数。 人群中有大多数和LGBT，那么大多数中就有LGBR和大多数，大多数的大多数中又有LGBS和大多数，子子孙孙无穷尽也。回到最开始的例子，都是那个看别人发帖生气的盲人的错么？人群中总有那么几个满嘴歧视沾沾自喜的人，但是盲人的问题却是因为与这些人的不满而站在了广大人群的对立面上，我就想发个帖，但是谁成想还要非得为你们这帮人做内容审查？ 关于LGBT，可以谈的东西太多了，少数人的权益问题、维护权利的暴力手段问题，没有一个是有明确答案的。但是，在这里，我对那些宣扬LGBT的完完全全持厌恶态度，你可以LGBT，但是请在自己家里自己圈地自萌，在人群中宣扬LGBT，就好比在大家看喜剧片的电影院里放一段恐怖片一样恶心。你是男同，我会争取不迫害你，但是不代表我能容许基佬贴在我身上。还有一个问题我们不得不重视，就是随着LGBT概念的传播，近些年会见到的自称LGBT人群的人越来越多，我认为LGBT是心理疾病，那么LGBT概念的大肆传播也是心理疾病的大型传播，青少年渴望融入圈子的心理以及概念传播导致的概念本身的正常化都导致了这些问题。 当然，一味的打压不可取，而放松管制同样存在问题，你要问我，我也没得办法。","link":"/2023/02/15/about_LGBT/"},{"title":"关于自由职业者程序员，我半个月的体验","text":"这半个月主要就干了两件事，一件是打新火纹，另一件就是接了两三单开发的单子，价格不高纯属尝鲜。今天终于闲下来总结一下“自由职业者程序员”也就是所谓的接私活的一些感悟。 关于自由职业者程序员，这篇文章主要从这几个方面来浅谈，分别是优点、缺点和注意事项。 缺点自由职业者的缺点相当明显，你从一个为别人打工的人变成了一个企业、一个个体户，没有人再为你的低效率买单，你能挣多少钱完全取决于你的经营。如何对外展示你的能力让别人雇用你，如何显得专业让别人认可你，这都是需要额外关注的。 自由职业者意味着你要一人成军，如果做网站，那么前端、后端、运维乃至客服等一系列工作都要你独自完成，这相当考验能力的全面性。而且最重要的一点是你的任务评估能力，一个项目看似不难就接了，但是实际操作起来发现问题并不简单，这种事情是最令人崩溃的，而由于单价已经谈妥，实际是亏本的，而且还要面临任务完成的风险。 而同样的，你多半干的是一锤子买卖，这意味缺少技术成长的机会，在考虑成本和盈利下，能跑就是一切。很少有架构升级，也很少能在项目中接触到先进技术，毕竟你不会的接了就有违约风险。 还有一点就是个人的能力，代码的能力，开发、测试、部署，项目编写脚本编写文档编写，一切的一切都要有很强的开发功底。 而最终的一个问题是，自由职业者的职业发展，你不可能一辈子都奋斗在作为自由职业者编码的前线，社交问题、养老问题、健康问题都需要考虑。面对这些问题，你只能硬着头皮独立承担。 优点虽然前面的缺点很多，但是优点同样明显，你不必再看老板的脸色，不必操心办公室政治、没完没了的会议和不得不参加的应酬。你甚至可以自由选择休假，手动平衡工作和生活的关系。 所有Freelance所带来的主要是自由。 注意事项前面没有谈收入，是要在这里谈，自由职业者的工资多劳多得，但是一个项目的价格不会很高，如果你有能力，那么挣美刀是一个相当不错的选择，这相当于你挣上海的工资在鹤岗花，而挣人民币就存在一个问题，IT界相对过剩的劳动力以及同样的劳动力价格，使得你的收入不会很高。 工作经历问题，在需要工作经历证明的时候，自由职业者如何出示工作经历证明，这是一个需要研究的问题。 另外就是作为自由职业者程序员，需要很多的积累，有很多现成的解决方案和可以直接复用的轮子，这能让你高效的接下一单工作并完成。不要想着什么项目都从0开始敲，自由职业者做项目是做生意不是做研究，别羞于以高效为宗旨。 最后就是沟通问题了，这点我从个人经验总结就是，一个项目要明确需求，这个明确需求一方面在于考虑的各种问题开工前沟通清楚，另一方面要求对方明确自己的需求，很多客户是没有明确需求的，只是你帮我做这个，但是一旦出现后期客户要改需求的时候，那么你的整个前期设计架构以及中期的编码很大程度上都要收到影响。这是一定要避免的。 另外，在一个平台开始的时候，为一个雇主多次服务是很不错的选择，我如何搞到第一份单子的呢？其实就是一个很小项目，我带着demo和别人竞争的，这样竞争力提升，而且成本也不是很高，就花了一天时间编码而已，但是后期是可以长久合作的这么一个客户。而当你在一个平台里搞到很多单子，并且积累了不错的账号口碑，针对和一个客户合作就要考虑清楚了，好处是沟通熟悉比较信任可以更好的开展工作，但是另一方面就是你要不停的维护过去的项目，藕断丝连，会浪费你更多赚钱的时间。 总结自由职业者程序员，我才体验半个月，所以很多东西都不能说很完善，有机会后期补充。 Freelancer是一个至少能让你不会饿死的岗位，可以自由考虑工作场地和居住地点，但是指望转大钱不太可能，为什么呢？因为没杠杆。好的生意是什么？是能够快速复制量化来增长的，Freelancer的问题是你的劳动和收入是拴死的，就像西西弗斯一样。如何发展自的杠杆，这是一个值得考虑的问题。","link":"/2023/02/17/about_Freelancer/"},{"title":"简单介绍一个IOS的分发工具：IPAshare","text":"IPAshare本质上就是利用ad-hoc手段分发软件，在有一定限制的前提绕过苹果商店和特定的证书限制发布。但是注意，它仅仅解决发布问题，而不是权限问题。 项目地址**https://github.com/togettoyou/ipashare** 本文内容大部分参考自https://github.com/sunBob-2/super-signature IPAshare的目的和实现逻辑IPAshare本质上就是利用ad-hoc手段分发软件，在有一定限制的前提绕过苹果商店和特定的证书限制发布。但是注意，它仅仅解决发布问题，而不是权限问题。 ad-hoc这种分发方式本质上是为了测试使用的，一个证书下面绑定100个设备，在给用户安装前需要将用户设备的UDID（标识符）添加到你的列表中，所以，原本的ad-hoc来分发软件相当的不方便，IPAshare解决的问题就是这部分不方便的自动化，核心就是利用苹果官方的API对这一流程进行自动化。具体什么是ad-hoc，网上有很多相关的教程和博客，这里就不赘述了。 IPAshare的关键动作从使用者来说，有依次的动作： 下载并安装mobileconfig 重定向到软件下载页面 安装并安装成功 从开发者的角度来看，依次有以下操作： 添加开发者账户 上传ipa文件 利用mobileconfig添加用户的UDID到开发中心 对ipa进行重签名生成新的IPA文件 返回plist文件供用户安装新的IPA文件 其中开发者视角的3,4,5与使用者视角的1,2,3是相互交错重合的 几点细节cert(certificates)和profile(provisioning profile)的创建是通过App Store Connect API申请创建的，创建后利用这些材料是使用zsign进行重签名，大致的命令如下： 1zsign -c ios_development.pem -k ios.key -m 描述文件.mobileprovision -o new.ipa Runner.ipa 重签名的时间点是在每次用户重定向到软件下载页面之后，也就是说每次用户下载都要进行重签名，为什么会这样？这是因为采用Ad-hoc做分发，需要用户的设备标识符，所以每个新用户下载软件都需要把用户的设备标识打包进新的ipa。而证书则不需要每次安装创建新的。 具体关于请求携带信息的格式以及响应的格式可以参考官方文档或者源码。profile是控制程序权限的重要工具，而profile本身并不是直接持有权限（entitlement），而是通过对应的bundleID中的capabilities来提供，IPAshare会默认使用wildcard(*)这一个bundleID来申请profile，这个bundleID是通配的，但是很多权限是无法设置的，因此如果在使用IPAshare的过程中，如果出现程序打不开，请去苹果开发者的页面检查对应的profile entitlement，很有可能是这个问题（我就踩的这个坑）。 另外，在添加开发者账户后，IPAshare会通过官方API生成一个development的证书（具体是apple development还是ios development我忘了），这个证书就是用于zsign重签的。而且这个证书只能申请两个（对于付费的开发者账户而言是这样的，其他的不清楚），所以IPAshare会检查这类证书在你账户中的数量，如果数量大于1，那么添加开发者账户这一操作就失败了，在这里添加的开发者信息和证书是两个概念，如果出现上述问题注意区别（这个坑我也踩了好久）。 软件的架构学习IPAshare的后端采用go语言编写，前端则用到了vite。配合docker可以实现快速部署，但是如果不使用docker自行部署还是很费力的，一方面要部署后端服务器，一方面又要部署Web，还有就是让两者畅通通信。我之前写过一个web端管理iptables的程序，采用的方法是内嵌Web资源的方式，是一个解决方案，这种手段虽然不是前后端分离，但是完全可以应付这样的使用场景（只不过用户不方便修改前端代码，但是却更易部署，既然部署容易其实就代表用户代码自定义会更容易），即又要提供页面有要提供API。 顺带提一句，前端的工具是真的迭代迅速啊，我两三年没碰前端框架，都不知道出现了pnpm这样的工具。 关于后端，IPAshare是一个值得初学者参考的web后端。后端的分层相当清晰，主要分为以下几层： main方法：在main方法中，主要针对命令行参数以及程序配置进行处理，并启动web服务器功能 请求响应层：主要的面向对象是用户的请求，包含web后端常见的鉴权、日志、API文档管理和路由功能，其中很多功能都以中间件的形式存在 接口层：针对用户请求以及路由，接口层负责具体逻辑的分发 服务层：服务层是由一系列具体的单一服务所组成的，该服务有合理的颗粒度，职责单一，上面的接口层通过对服务层调用组合并加以适当的逻辑来完成特定的任务 model层：model不是严格的遵循上下层的关系，针对静态类型语言，需要设置model层统一管理程序中的各种对象，当然，动态类型能用也尽可能使用，这带来的是代码的阅读性与一致性。几乎所有层都需引用model层 dao层：dao是数据访问对象（Data Access Object）的缩写，主要服务数据的持久化并向外提供数据持久化的操作接口 pkg层：很多复杂方法的封装如果写在服务层会显得缺乏颗粒度，因此采用pkg层，其实也就是所谓的utils。 大中规模的单体网站都可以采用这样的架构模式，很传统但值得学习。 总结IPAshare这个软件实际用起来比想象的要简单很多，但是前提是用户需要知道IOS开发分发的很多基本概念。本文简单对IPAshare做了一个讲解，其中包括了很多自己踩的坑，当然都是因为IOS开发分发概念不熟悉导致的。 因为这些坑，我阅读程序部分源码，也因而学到了不少东西，非常感谢，也感谢程序作者以及库的作者能制作出予人便利的工具供大家使用。","link":"/2023/06/10/ipashare%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"},{"title":"五月旅行感言","text":"自从复试之后，好像就没怎么在家呆着，五月份在外面玩了半个月，遇到了几种不同的生活，在这里也算个总结也算个回顾，记录一下 不知道从哪里看到的，说旅行是一次体验别人生活的过程，在旅行中遇见那个平行的自己，他有你所羡慕的，而亦有你所看不见的苦恼，他是你的可能性。我对于旅行而言，不喜欢风景名胜、也不爱景观遗迹，它对于我来说就是一次逃离生活的尝试，一次与人再次联系的媒介。 在通辽的朋友住了一周，暂且称他为L吧。通辽是一个在内蒙经济前十甚至前五的城市，但是如果你从全国的维度来看，默默无闻，一个青年（不吃公家饭的）在这样的城市生活会是一种什么体验呢？说实话，他活得很滋润，滋润的我都有点向往。当然很大程度上是工作决定了他的滋润，因为早些时候他在创业的时候也又忙又累，亏了钱又继续上班，早年也买了车子房子，压力小。很小的时候感觉，人的幸福是在大城市，光鲜亮丽，但是在杭州真正生活的一年却并不是这样的，尽管大城市的建设和娱乐非常好，但是却是忙碌、复杂的补充。在通辽的日子给了我一个疑问，为什么就不能在五六线县城生活呢？也许有一种幸福就是在五六线城市避开匆忙且焦虑的眼神与攀比的目光。 而后去了大连，相比与通辽，大连太符合现代化大城市的定义了，朋友X刚和老婆搬进新房，生活一切步上正轨，只是要还二十年的房贷。X很聪明，这种聪明体现在目标明确上，早些年确定了网路后就一直在这条路上狂奔向前，这次新房也搞了智能家居，是一个很清楚自己想要什么的人。或许他也是我的可能性之一吧，每每想到这里我都会很无奈。大连的另一个朋友M则好好的招待了我，说实话，招待的我都不好意思了，好酒好菜，放在去年，真有种“玉盘珍羞直万钱，拔剑四顾心茫然”的感觉，但是今年索性我俩都成功上岸了。我和M共同的好友Z在北京当程序员，M的一个评价很戳中我，”耗材“，”北京挣钱北京花，一分别想带回家“。离开大连我满脑子想的下半年找个机会要好好的给M回礼。 这三年的生活塑造我低欲望的性格，又或者是绷的住。而我这次也看见了欲望和关注点远远超出了自己当前水平的，也看见了满嘴跑火车搞得自己信誉破产的，还有现在不求大富但稳定工作的。我相信低欲望不是坏事，而五月份的这次旅行也算是我在长期低欲望的隐士生活后对社会的一次适应。 杂谈到此，回顾的部分也就差不多了，而所遇见的别人的生活只能当一个参考，毕竟无数的随机决定了一种生活，我相信，我们都能在这里学到些什么，或好或坏。","link":"/2023/05/22/%E4%BA%94%E6%9C%88%E6%97%85%E8%A1%8C%E6%84%9F%E8%A8%80/"},{"title":"《gRPC: Up And Running》读书笔记","text":"书的内容不多，是我最喜欢的o’reilly出版社出版的，gRPC不算复杂，但是关键是要应用。 概述gRPC主要应用在微服务架构中服务间通信，其竞争者有REST、MQ，gRPC的主要优点就是和程序语言融合紧密，相比起REST来说有种强弱类型语言对比的感觉，而相比于MQ来说，缺少了MQ的持久化机制，尽管gRPC是今天的主角，但是很多情况下，gRPC不能替代REST和MQ。向外供人调用的端口使用REST更合适，因为REST广泛且学习成本低，而在需要持久化的情况下，gRPC也替代不了MQ。 hello world程序搭建一个gRPC应用的步骤很简单： 编写proto文件定义接口的方法和消息格式 使用protoc等工具生成对应的Protocol Buffers相关的源代码 在具体项目中根据生成的源代码编写服务器或者客户端来实现监听或者通信 由于框架版本的问题，网上很多教程包括本书的hello world教程都不能正常跑，在这里需要初学者花一些功夫解决这个问题。 基础概念针对gRPC提供了四种通信模式，分别是Unary RPC、Server Streaming、Client Streaming 和 Bidirectional Streaming，主要区别在于请求和相应的数量问题，Unary RPC采用的是一个请求一个相应的模式，而Streaming系列则是代表多个消息，因此Server Streaming就客户端一个请求，而服务器返回多个响应，以此类推理解其他的通信模式。在这里的关键是要理解四种通信模式的使用场景，在实际项目中合理选择。 另外gRPC还有三种传输实现，分别是HTTP/2.0、Cronet和in-process，一般来说都使用HTTP/2.0，Cronet是针对移动端的优化实现。 gRPC的具体实现细节并不需要了解太深，主要是如何编码，在这里暂时省略。 功能支持gRPC在基础的通信基础上提供了额外的功能支持： interceptor（拦截器）：拦截器有两种类型，分别是Unary和Stream，两者的函数签名并不相同，拦截器的主要作用相当于web中的中间件。而且要注意，拦截器是从后向前依次执行的。 deadline（超时）：deadline和timeoute是两种机制，deadline是确定时间点，而timeout是时间段，而且设置的位置也不一样，两者都可以设置在客户端，但是deadline主要是发送给服务器，而timeout则一般都是在客户端设置。两者可以结合使用。 cancellation（取消）：cancellation是通过Context设置的，没什么额外要说的 error handling（错误处理）：服务端返回错误是利用status，客户端则根据status的code来做处理 multiplexing（多路服用）：这里的mutiplexing就是在一个gRPC服务器上注册多个gRPC服务 metadata（元数据）：十分类似于在http的header上添加自定义的key value Name Resolver（域名解析）：使用域名而不是IP来进行通信 load balancing（负载均衡）：负载均衡主要分为两种实现，客户端实现和服务器端代理实现，前者并不会知晓服务器的情况，因此有局限性，而服务器端代理则可以利用nginx这样的代理软件来实现 compression（压缩）：利用gzip来对消息进行压缩，节省带宽 安全性关于gRPC的安全性，主要依赖于两个部分，TLS和用户认证，TLS支持单向TLS和双向TLS，关于TLS的知识建议自行了解。用户认证也很简单，主要就是通过metadata传输认证信息，再结合interceptor来实现认证。具体的几种认证手段则不多说了。 生产环境关于测试核心注意的就是使用mock工具做单元测试，还有就是ghz可以做负载测试。部署在docker和k8s则属于相关工具的使用，不谈了。 在程序运行中的观测是十分重要的，利用OpenCensus和Prometheus，可以观测特定指标并进行tracing功能，日志系统则配合interceptor工作。 生态系统在本章介绍了几个工具，分别是： gRPC Gateway：将REST转化为gRPC服务 Transcoding：将REST请求转化为gRPC请求 Reflection Protocol：通过反射来了解服务器的服务和消息定义 Middleware：也就是interceptor的功能 Health Checking / Health Probe 当个了解，然后各取所需","link":"/2023/06/27/gRPC_Up_And_Running_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"title":"又又又又又又重启博客","text":"已经不知道多少次重启博客了，主要原因还是每过一个阶段都感觉前一个阶段的博文有很多问题，集中体现在： 技术不成熟，很多内容显得幼稚 内容不完善不完整，很多文章没有及时整理更新 很多坑就放在那里导致博客越看越不舒服 虽然文章并没有什么浏览量，但是这样挂着总归心里不舒服。在犹豫了很久之后，还是重启。 去年的博客大部分内容都更新在渗透方面。但在了解了一些网安方面的知识之后发现并不适合自己。这也是重启的原因之一。 今后的更新的周期可能要拉的更长一些，确保文章质量，把个人博客作为一个名片来看待。","link":"/2023/01/04/hello-world/"}],"tags":[{"name":"杂谈","slug":"杂谈","link":"/tags/%E6%9D%82%E8%B0%88/"},{"name":"软件开发","slug":"软件开发","link":"/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"框架学习","slug":"框架学习","link":"/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"杂谈","slug":"杂谈","link":"/categories/%E6%9D%82%E8%B0%88/"},{"name":"软件开发","slug":"软件开发","link":"/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"pages":[]}